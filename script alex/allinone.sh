#!/bin/bash
# Script d'Administration Syst√®me Unifi√©
# Auteurs : Jimmy RAMSAMYNA√èCK, Sameer VALI ADAM, Alexandre BADOUARD
# Date : $(date)
# Version : 2.0

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Variables globales
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_DIR="/tmp/admin_logs"
mkdir -p "$LOG_DIR"

# Fonction d'affichage du banner
afficher_banner() {
    clear
    echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${CYAN}‚ïë${WHITE}                    SUITE D'ADMINISTRATION SYST√àME                           ${CYAN}‚ïë${NC}"
    echo -e "${CYAN}‚ïë${WHITE}                     Version 2.0 - $(date +%Y)                                    ${CYAN}‚ïë${NC}"
    echo -e "${CYAN}‚ïë${WHITE}        Auteurs: Jimmy RAMSAMYNA√èCK, Sameer VALI ADAM, Alexandre BADOUARD   ${CYAN}‚ïë${NC}"
    echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo
}

# Fonction d'affichage du menu principal
afficher_menu_principal() {
    echo -e "${WHITE}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${NC}"
    echo -e "${WHITE}‚îÇ${BLUE}                           MENU PRINCIPAL    (h pour aide)                  ${WHITE}‚îÇ${NC}"
    echo -e "${WHITE}‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§${NC}"
    echo -e "${WHITE}‚îÇ ${GREEN}1.${NC}  üìä Analyse des logs Apache                                          ${WHITE}‚îÇ${NC}"
    echo -e "${WHITE}‚îÇ ${GREEN}2.${NC}  üîê Analyse des connexions SSH                                       ${WHITE}‚îÇ${NC}"
    echo -e "${WHITE}‚îÇ ${GREEN}3.${NC}  üßπ Nettoyeur de fichiers sensibles                                  ${WHITE}‚îÇ${NC}"
    echo -e "${WHITE}‚îÇ ${GREEN}4.${NC}  üíæ Surveillance de l'espace disque                                  ${WHITE}‚îÇ${NC}"
    echo -e "${WHITE}‚îÇ ${GREEN}5.${NC}  üì¶ V√©rification des mises √† jour                                    ${WHITE}‚îÇ${NC}"
    echo -e "${WHITE}‚îÇ ${GREEN}6.${NC}  üßΩ Optimisation et nettoyage syst√®me                                ${WHITE}‚îÇ${NC}"
    echo -e "${WHITE}‚îÇ ${GREEN}7.${NC}  ‚è∞ Planificateur de t√¢ches                                          ${WHITE}‚îÇ${NC}"
    echo -e "${WHITE}‚îÇ ${GREEN}8.${NC}  üìã Rapport syst√®me complet                                           ${WHITE}‚îÇ${NC}"
    echo -e "${WHITE}‚îÇ ${GREEN}9.${NC}  üíæ Sauvegarde de donn√©es                                             ${WHITE}‚îÇ${NC}"
    echo -e "${WHITE}‚îÇ ${GREEN}10.${NC} üîÑ Synchronisation de r√©pertoires                                   ${WHITE}‚îÇ${NC}"
    echo -e "${WHITE}‚îÇ ${GREEN}11.${NC} üèóÔ∏è  G√©n√©rateur de templates de projet                               ${WHITE}‚îÇ${NC}"
    echo -e "${WHITE}‚îÇ ${GREEN}12.${NC} üåê Test de connectivit√© r√©seau                                      ${WHITE}‚îÇ${NC}"
    echo -e "${WHITE}‚îÇ ${GREEN}0.${NC}  üö™ Quitter                                                           ${WHITE}‚îÇ${NC}"
    echo -e "${WHITE}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${NC}"
    echo
}

# Fonction 1: Analyse des logs Apache
analyser_logs_apache() {
    echo -e "${YELLOW}üìä Analyse des logs Apache...${NC}"
    
    # V√©rification des droits root
    if [ "$(id -u)" -ne 0 ]; then
        echo -e "${RED}‚ùå Ce script doit √™tre ex√©cut√© avec les droits root.${NC}"
        return 1
    fi

    # D√©finition des fichiers de log Apache
    LOG_FILES=("/var/log/apache2/access.log" "/var/log/apache2/error.log")
    
    # V√©rification de la pr√©sence des fichiers
    for LOG_FILE in "${LOG_FILES[@]}"; do
        if [ ! -f "$LOG_FILE" ]; then
            echo -e "${RED}‚ùå Le fichier de log $LOG_FILE n'existe pas.${NC}"
            return 1
        fi
    done

    # Fichiers de sortie
    REPORT_FILE="$LOG_DIR/log_analysis_apache_report_$(date +%Y%m%d_%H%M%S).txt"
    SUSPICIOUS_IP_FILE="$LOG_DIR/apache_suspicious_ips.txt"
    ERRORS_FILE="$LOG_DIR/apache_frequent_errors.txt"

    # R√©initialisation
    > "$REPORT_FILE"
    > "$SUSPICIOUS_IP_FILE"
    > "$ERRORS_FILE"

    echo -e "${BLUE}üîç Analyse en cours...${NC}"
    START_TIME=$(date +%s)

    # Analyse des fichiers de logs
    for LOG_FILE in "${LOG_FILES[@]}"; do
        echo "Analyse du fichier : $LOG_FILE"
        
        # Erreurs fr√©quentes (HTTP 4xx / 5xx)
        awk '{print $9}' "$LOG_FILE" 2>/dev/null | grep -E '^[45][0-9]{2}$' | sort | uniq -c | sort -nr >> "$ERRORS_FILE"
        
        # IP suspectes (plus de 100 requ√™tes)
        awk '{print $1}' "$LOG_FILE" 2>/dev/null | sort | uniq -c | sort -nr | awk '$1 > 100' >> "$SUSPICIOUS_IP_FILE"
    done

    # G√©n√©ration du rapport
    {
        echo "Rapport d'analyse Apache - $(date)"
        echo "======================================"
        echo ""
        echo "Erreurs fr√©quentes :"
        cat "$ERRORS_FILE"
        echo ""
        echo "Adresses IP suspectes :"
        cat "$SUSPICIOUS_IP_FILE"
    } > "$REPORT_FILE"

    END_TIME=$(date +%s)
    echo -e "${GREEN}‚úÖ Rapport g√©n√©r√© avec succ√®s : $REPORT_FILE${NC}"
    echo -e "${BLUE}‚è±Ô∏è  Dur√©e d'ex√©cution : $((END_TIME - START_TIME)) secondes${NC}"
    
    read -p "Appuyez sur Entr√©e pour continuer..."
}

# Fonction 2: Analyse des connexions SSH
analyser_ssh() {
    echo -e "${YELLOW}üîê Analyse des connexions SSH...${NC}"
    
    LOG="/var/log/auth.log"
    if [ ! -f "$LOG" ]; then
        LOG="/var/log/secure"  # Pour CentOS/RHEL
        if [ ! -f "$LOG" ]; then
            echo -e "${RED}‚ùå Fichier de log SSH introuvable.${NC}"
            return 1
        fi
    fi

    HEURE_SUSPECTE_DEBUT=0
    HEURE_SUSPECTE_FIN=5
    RAPPORT="$LOG_DIR/rapport_ssh_$(date +%F_%H-%M).txt"

    echo -e "${BLUE}üîç Analyse en cours...${NC}"
    
    {
        echo "Rapport d'analyse SSH ‚Äî $(date)"
        echo "Fichier analys√© : $LOG"
        echo "--------------------------------------------"
        
        echo -e "\nConnexions SSH r√©ussies :"
        grep "Accepted" "$LOG" 2>/dev/null | awk '{print $1, $2, $3, $9, $11}' | tail -20
        
        echo -e "\nUtilisateurs connect√©s r√©cemment :"
        grep "Accepted" "$LOG" 2>/dev/null | awk '{print $9}' | sort | uniq
        
        echo -e "\nIP de connexion d√©tect√©es :"
        grep "Accepted" "$LOG" 2>/dev/null | awk '{print $11}' | sort | uniq
        
        echo -e "\nConnexions √† des heures inhabituelles (entre ${HEURE_SUSPECTE_DEBUT}h et ${HEURE_SUSPECTE_FIN}h) :"
        grep "Accepted" "$LOG" 2>/dev/null | awk -v debut=$HEURE_SUSPECTE_DEBUT -v fin=$HEURE_SUSPECTE_FIN '
        {
            split($3, t, ":");
            heure = t[1];
            if (heure + 0 >= debut && heure + 0 < fin) print $0;
        }'
    } > "$RAPPORT"

    echo -e "${GREEN}‚úÖ Rapport SSH g√©n√©r√© : $RAPPORT${NC}"
    read -p "Appuyez sur Entr√©e pour continuer..."
}

# Fonction 3: Nettoyeur de fichiers sensibles
nettoyer_fichiers_sensibles() {
    echo -e "${YELLOW}üßπ Nettoyeur de fichiers sensibles...${NC}"
    
    read -p "R√©pertoire √† analyser (chemin absolu ou relatif) : " REPERTOIRE
    
    if [ ! -d "$REPERTOIRE" ]; then
        echo -e "${RED}‚ùå Le r√©pertoire sp√©cifi√© n'existe pas.${NC}"
        return 1
    fi

    SECURE_DIR="$HOME/fichiers_sensibles_$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$SECURE_DIR"

    echo -e "${BLUE}üîç Recherche de fichiers sensibles dans : $REPERTOIRE${NC}"
    
    declare -a fichiers_trouves

    # Recherche de fichiers sensibles
    while IFS= read -r fichier; do
        fichiers_trouves+=("$fichier")
    done < <(find "$REPERTOIRE" -type f \( -name ".env" -o -name "id_rsa" -o -name "*secret*" -o -name "*password*" -o -iname "*.pem" -o -iname "*.key" \) 2>/dev/null)

    # Recherche de contenu sensible
    while IFS= read -r fichier; do
        if grep -qiE "(password|secret|PRIVATE KEY)" "$fichier" 2>/dev/null; then
            fichiers_trouves+=("$fichier")
        fi
    done < <(find "$REPERTOIRE" -type f \( -iname "*.log" -o -iname "*.conf" -o -iname "*.txt" \) 2>/dev/null)

    if [ ${#fichiers_trouves[@]} -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Aucun fichier sensible d√©tect√©.${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Fichiers sensibles d√©tect√©s :${NC}"
        for f in "${fichiers_trouves[@]}"; do
            echo -e "  ${RED}‚Ä¢${NC} $f"
        done
        
        echo
        read -p "Souhaitez-vous d√©placer ces fichiers dans $SECURE_DIR ? (y/n) : " reponse
        
        if [[ "$reponse" == "y" || "$reponse" == "Y" ]]; then
            for f in "${fichiers_trouves[@]}"; do
                if mv "$f" "$SECURE_DIR" 2>/dev/null; then
                    echo -e "${GREEN}‚úÖ D√©plac√© : $f${NC}"
                fi
            done
            echo -e "${GREEN}‚úÖ Tous les fichiers ont √©t√© d√©plac√©s dans : $SECURE_DIR${NC}"
        else
            echo -e "${BLUE}‚ÑπÔ∏è  Aucun fichier n'a √©t√© d√©plac√©.${NC}"
        fi
    fi
    
    read -p "Appuyez sur Entr√©e pour continuer..."
}

# Fonction 4: Surveillance de l'espace disque
surveiller_disque() {
    echo -e "${YELLOW}üíæ Surveillance de l'espace disque...${NC}"
    
    SEUIL=80
    PARTITION="/"
    
    UTILISATION=$(df -h "$PARTITION" | awk 'NR==2 {gsub("%",""); print $5}')
    
    echo -e "${BLUE}üìä Utilisation actuelle de $PARTITION : ${WHITE}$UTILISATION%${NC}"
    
    if [ "$UTILISATION" -ge "$SEUIL" ]; then
        echo -e "${RED}‚ö†Ô∏è  ATTENTION : L'espace disque utilis√© sur $PARTITION a atteint $UTILISATION% !${NC}"
        
        if command -v notify-send &> /dev/null; then
            notify-send "Alerte disque" "Utilisation disque sur $PARTITION : $UTILISATION%" --urgency=critical
        fi
    else
        echo -e "${GREEN}‚úÖ Espace disque normal.${NC}"
    fi
    
    echo -e "${BLUE}üìà D√©tails des partitions :${NC}"
    df -h
    
    read -p "Appuyez sur Entr√©e pour continuer..."
}

# Fonction 5: V√©rification des mises √† jour
verifier_maj() {
    echo -e "${YELLOW}üì¶ V√©rification des mises √† jour...${NC}"
    
    FICHIER_RAPPORT="$LOG_DIR/maj_packages_$(date +%Y-%m-%d_%H-%M-%S).txt"
    
    {
        echo "V√©rification des mises √† jour disponibles (APT)..."
        echo "Date : $(date)"
        echo "Utilisateur : $USER"
        echo "---------------------------------------------"
    } > "$FICHIER_RAPPORT"
    
    echo -e "${BLUE}üîÑ Mise √† jour des informations des paquets...${NC}"
    if command -v apt &> /dev/null; then
        sudo apt update -qq
        apt list --upgradable 2>/dev/null >> "$FICHIER_RAPPORT"
    elif command -v yum &> /dev/null; then
        yum check-update >> "$FICHIER_RAPPORT" 2>&1
    else
        echo "Gestionnaire de paquets non support√©" >> "$FICHIER_RAPPORT"
    fi
    
    echo "---------------------------------------------" >> "$FICHIER_RAPPORT"
    echo "Rapport sauvegard√© dans : $FICHIER_RAPPORT" >> "$FICHIER_RAPPORT"
    
    echo -e "${GREEN}‚úÖ Rapport g√©n√©r√© : $FICHIER_RAPPORT${NC}"
    cat "$FICHIER_RAPPORT"
    
    read -p "Appuyez sur Entr√©e pour continuer..."
}

# Fonction 6: Optimisation syst√®me
optimiser_systeme() {
    echo -e "${YELLOW}üßΩ Optimisation et nettoyage syst√®me...${NC}"
    
    echo -e "${BLUE}üóëÔ∏è  Suppression des fichiers temporaires...${NC}"
    sudo rm -rf /tmp/* /var/tmp/* 2>/dev/null
    
    if command -v apt-get &> /dev/null; then
        echo -e "${BLUE}üßπ Nettoyage du cache APT...${NC}"
        sudo apt-get clean
        sudo apt-get autoclean
    fi
    
    if command -v npm &> /dev/null; then
        echo -e "${BLUE}üì¶ Nettoyage du cache NPM...${NC}"
        npm cache clean --force 2>/dev/null
    fi
    
    echo -e "${BLUE}üêç Suppression des fichiers Python compil√©s (.pyc)...${NC}"
    find ~ -type f -name "*.pyc" -delete 2>/dev/null
    
    echo -e "${GREEN}‚úÖ Nettoyage termin√© avec succ√®s !${NC}"
    
    read -p "Appuyez sur Entr√©e pour continuer..."
}

# Fonction 7: Planificateur de t√¢ches
planificateur_taches() {
    echo -e "${YELLOW}‚è∞ Planificateur de t√¢ches...${NC}"
    
    while true; do
        echo -e "${WHITE}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${NC}"
        echo -e "${WHITE}‚îÇ${BLUE}        PLANIFICATEUR DE T√ÇCHES          ${WHITE}‚îÇ${NC}"
        echo -e "${WHITE}‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§${NC}"
        echo -e "${WHITE}‚îÇ ${GREEN}1.${NC} Ajouter une t√¢che                    ${WHITE}‚îÇ${NC}"
        echo -e "${WHITE}‚îÇ ${GREEN}2.${NC} Afficher les t√¢ches                  ${WHITE}‚îÇ${NC}"
        echo -e "${WHITE}‚îÇ ${GREEN}3.${NC} Vider le crontab                     ${WHITE}‚îÇ${NC}"
        echo -e "${WHITE}‚îÇ ${GREEN}0.${NC} Retour au menu principal             ${WHITE}‚îÇ${NC}"
        echo -e "${WHITE}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${NC}"
        
        read -p "Votre choix : " choix_cron
        
        case $choix_cron in
            1)
                read -p "Entrez la commande ou le chemin complet du script : " commande
                
                echo "Choisissez la fr√©quence :"
                echo "1) Toutes les minutes"
                echo "2) Toutes les heures"
                echo "3) Tous les jours"
                echo "4) Tous les lundis"
                echo "5) Tous les mois"
                echo "6) Personnalis√©"
                
                read -p "Votre choix : " freq_choix
                
                case $freq_choix in
                    1) cron_time="* * * * *" ;;
                    2) cron_time="0 * * * *" ;;
                    3) cron_time="0 0 * * *" ;;
                    4) cron_time="0 0 * * 1" ;;
                    5) cron_time="0 0 1 * *" ;;
                    6) read -p "Entrez votre expression cron : " cron_time ;;
                    *) echo "Choix invalide."; continue ;;
                esac
                
                read -p "Description de la t√¢che : " description
                (crontab -l 2>/dev/null; echo "# $description"; echo "$cron_time $commande") | crontab -
                echo -e "${GREEN}‚úÖ T√¢che ajout√©e au crontab.${NC}"
                ;;
            2)
                echo -e "${BLUE}üìã T√¢ches actuellement planifi√©es :${NC}"
                crontab -l 2>/dev/null || echo "Aucune t√¢che planifi√©e."
                ;;
            3)
                read -p "√ätes-vous s√ªr de vouloir supprimer toutes les t√¢ches ? (o/n) : " confirm
                if [[ "$confirm" == "o" ]]; then
                    crontab -r 2>/dev/null
                    echo -e "${GREEN}‚úÖ Crontab vid√©.${NC}"
                fi
                ;;
            0) return ;;
            *) echo -e "${RED}‚ùå Choix invalide.${NC}" ;;
        esac
        
        read -p "Appuyez sur Entr√©e pour continuer..."
    done
}

# Fonction 8: Rapport syst√®me
generer_rapport_systeme() {
    echo -e "${YELLOW}üìã G√©n√©ration du rapport syst√®me...${NC}"
    
    if [ "$(id -u)" -ne 0 ]; then
        echo -e "${RED}‚ùå Ce script doit √™tre ex√©cut√© avec les droits root.${NC}"
        return 1
    fi

    DEST_DIR="$LOG_DIR/rapports"
    mkdir -p "$DEST_DIR"
    
    DATE_TAG=$(date +%Y%m%d_%H%M%S)
    REPORT_FILE="$DEST_DIR/rapport_systeme_${DATE_TAG}.txt"
    
    echo -e "${BLUE}üìä Collecte des informations syst√®me...${NC}"
    
    {
        echo "===== INFORMATIONS SYST√àME ====="
        echo "OS : $(uname -s)"
        echo "Version : $(uname -r)"
        echo "Architecture : $(uname -m)"
        echo "Uptime : $(uptime -p 2>/dev/null || uptime)"
        echo ""

        echo "===== UTILISATION CPU ====="
        top -b -n1 | grep "Cpu(s)" 2>/dev/null || echo "Information CPU non disponible"
        echo ""

        echo "===== M√âMOIRE ====="
        free -h
        echo ""

        echo "===== DISQUES ====="
        df -h
        echo ""

        echo "===== SERVICES ACTIFS ====="
        if command -v systemctl &> /dev/null; then
            systemctl list-units --type=service --state=running 2>/dev/null | head -20
        else
            echo "systemctl non disponible"
        fi
        echo ""

        echo "===== R√âSEAU ====="
        echo "Adresse IP : $(hostname -I 2>/dev/null | awk '{print $1}' || echo 'Non disponible')"
        echo "Nom d'h√¥te : $(hostname)"
        echo ""

        echo "===== UTILISATEURS ET PROCESSUS ====="
        echo "Utilisateurs connect√©s :"
        who 2>/dev/null || echo "Information non disponible"
        echo ""
        echo "Top 10 processus m√©moire :"
        ps aux --sort=-%mem 2>/dev/null | head -n 10 || echo "Information non disponible"
    } > "$REPORT_FILE"

    echo -e "${GREEN}‚úÖ Rapport g√©n√©r√© : $REPORT_FILE${NC}"
    
    read -p "Appuyez sur Entr√©e pour continuer..."
}

# Fonction 9: Sauvegarde
sauvegarder_donnees() {
    echo -e "${YELLOW}üíæ Sauvegarde de donn√©es...${NC}"
    
    read -p "Dossier source √† sauvegarder : " SOURCE
    
    if [ ! -d "$SOURCE" ]; then
        echo -e "${RED}‚ùå Le dossier source n'existe pas.${NC}"
        return 1
    fi

    DATE=$(date +"%Y-%m-%d_%H-%M-%S")
    ARCHIVE_NAME="sauvegarde_$DATE.tar.gz"
    DEST_LOCAL="$LOG_DIR"
    
    echo -e "${BLUE}üì¶ Cr√©ation de l'archive...${NC}"
    
    if tar -czf "$DEST_LOCAL/$ARCHIVE_NAME" "$SOURCE" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Archive cr√©√©e : $DEST_LOCAL/$ARCHIVE_NAME${NC}"
        echo -e "${BLUE}üìä Taille de l'archive : $(du -h "$DEST_LOCAL/$ARCHIVE_NAME" | cut -f1)${NC}"
    else
        echo -e "${RED}‚ùå Erreur lors de la cr√©ation de l'archive.${NC}"
    fi
    
    read -p "Appuyez sur Entr√©e pour continuer..."
}

# Fonction 10: Synchronisation de r√©pertoires
synchroniser_repertoires() {
    echo -e "${YELLOW}üîÑ Synchronisation de r√©pertoires...${NC}"
    
    if [ "$(id -u)" -ne 0 ]; then
        echo -e "${RED}‚ùå Ce script doit √™tre ex√©cut√© avec les droits root.${NC}"
        return 1
    fi

    if ! command -v rsync &>/dev/null; then
        echo -e "${RED}‚ùå rsync n'est pas install√©.${NC}"
        return 1
    fi

    read -p "R√©pertoire source : " source
    read -p "R√©pertoire destination : " destination
    
    if [[ ! -d "$source" ]]; then
        echo -e "${RED}‚ùå Le r√©pertoire source n'existe pas.${NC}"
        return 1
    fi

    echo "Choisissez le mode :"
    echo "1) Synchronisation unique"
    echo "2) Synchronisation continue (Ctrl+C pour arr√™ter)"
    
    read -p "Votre choix : " mode_sync
    
    case $mode_sync in
        1)
            echo -e "${BLUE}üîÑ Synchronisation en cours...${NC}"
            if rsync -av --delete "$source/" "$destination/"; then
                echo -e "${GREEN}‚úÖ Synchronisation termin√©e.${NC}"
            else
                echo -e "${RED}‚ùå Erreur lors de la synchronisation.${NC}"
            fi
            ;;
        2)
            echo -e "${BLUE}üîÑ Synchronisation continue activ√©e...${NC}"
            while true; do
                rsync -av --delete "$source/" "$destination/"
                echo -e "${GREEN}‚úÖ Synchronisation effectu√©e √† $(date)${NC}"
                sleep 60
            done
            ;;
        *)
            echo -e "${RED}‚ùå Choix invalide.${NC}"
            ;;
    esac
    
    read -p "Appuyez sur Entr√©e pour continuer..."
}

# Fonction 11: G√©n√©rateur de templates
generer_templates() {
    echo -e "${YELLOW}üèóÔ∏è G√©n√©rateur de templates de projet...${NC}"
    
    while true; do
        echo -e "${WHITE}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${NC}"
        echo -e "${WHITE}‚îÇ${BLUE}      G√âN√âRATEUR DE TEMPLATES            ${WHITE}‚îÇ${NC}"
        echo -e "${WHITE}‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§${NC}"
        echo -e "${WHITE}‚îÇ ${GREEN}1.${NC} Projet Site HTML                     ${WHITE}‚îÇ${NC}"
        echo -e "${WHITE}‚îÇ ${GREEN}2.${NC} Projet Bash                          ${WHITE}‚îÇ${NC}"
        echo -e "${WHITE}‚îÇ ${GREEN}0.${NC} Retour au menu principal             ${WHITE}‚îÇ${NC}"
        echo -e "${WHITE}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${NC}"
        
        read -p "Votre choix : " choix_template
        
        case $choix_template in
            1)
                read -p "Nom du projet HTML : " nom_projet
                mkdir -p "$nom_projet/css" "$nom_projet/js"

                cat > "$nom_projet/index.html" <<EOF
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>$nom_projet</title>
    <link rel="stylesheet" href="css/style.css">
</head>
<body>
    <h1>Bienvenue sur le projet $nom_projet</h1>
    <script src="js/script.js"></script>
</body>
</html>
EOF

                echo "/* Styles pour $nom_projet */" > "$nom_projet/css/style.css"
                echo "// Scripts pour $nom_projet" > "$nom_projet/js/script.js"
                echo "# $nom_projet" > "$nom_projet/README.md"

                echo -e "${GREEN}‚úÖ Projet HTML '$nom_projet' cr√©√© avec succ√®s !${NC}"
                ;;
            2)
                read -p "Nom du projet Bash : " nom_projet
                mkdir -p "$nom_projet/scripts" "$nom_projet/docs"

                cat > "$nom_projet/scripts/main.sh" <<EOF
#!/bin/bash
# Script principal du projet $nom_projet
# Auteur : $USER

echo "Bienvenue dans le projet $nom_projet"
EOF

                chmod +x "$nom_projet/scripts/main.sh"
                echo "# $nom_projet" > "$nom_projet/README.md"

                echo -e "${GREEN}‚úÖ Projet Bash '$nom_projet' cr√©√© avec succ√®s !${NC}"
                ;;
            0) return ;;
            *) echo -e "${RED}‚ùå Choix invalide.${NC}" ;;
        esac
        
        read -p "Appuyez sur Entr√©e pour continuer..."
    done
}

# Fonction 12: Test r√©seau
tester_reseau() {
    echo -e "${YELLOW}üåê Test de connectivit√© r√©seau...${NC}"
    
    LOG_FILE="$LOG_DIR/network_test_results_$(date +%Y%m%d_%H%M%S).log"
    
    echo -e "${BLUE}üîç Test de connectivit√©...${NC}"
    
    SERVERS=("google.com" "github.com" "cloudflare.com")
    
    {
        echo "Test de connectivit√© r√©seau - $(date)"
        echo "---------------------------------"
        echo "R√©sultats du ping :"
        
        for SERVER in "${SERVERS[@]}"; do
            echo "Test de $SERVER..."
            if ping -c 4 "$SERVER" >/dev/null 2>&1; then
                echo "‚úÖ $SERVER est accessible"
            else
                echo "‚ùå $SERVER n'est pas accessible"
            fi
        done
        
        echo ""
        echo "Test des ports locaux :"
        
        PORTS=(22 80 443)
        for PORT in "${PORTS[@]}"; do
            if command -v nc &> /dev/null; then
                if nc -zv localhost "$PORT" >/dev/null 2>&1; then
                    echo "‚úÖ Port $PORT ouvert"
                else
                    echo "‚ùå Port $PORT ferm√©"
                fi
            else
                echo "‚ö†Ô∏è  nc (netcat) non disponible pour tester le port $PORT"
            fi
        done
        
    } | tee "$LOG_FILE"

echo ""
    echo -e "${GREEN}‚úÖ R√©sultats sauvegard√©s dans : $LOG_FILE${NC}"
    
    # Test de r√©solution DNS
    echo -e "${BLUE}üîç Test de r√©solution DNS...${NC}"
    echo "" >> "$LOG_FILE"
    echo "Test de r√©solution DNS - $(date)" >> "$LOG_FILE"
    echo "---------------------------------" >> "$LOG_FILE"
    
    for SERVER in "${SERVERS[@]}"; do
        if nslookup "$SERVER" >/dev/null 2>&1; then
            echo "‚úÖ R√©solution DNS de $SERVER r√©ussie" | tee -a "$LOG_FILE"
        else
            echo "‚ùå √âchec de r√©solution DNS de $SERVER" | tee -a "$LOG_FILE"
        fi
    done
    
    # Affichage des informations r√©seau
    echo -e "${BLUE}üåê Informations r√©seau actuelles :${NC}"
    echo "" >> "$LOG_FILE"
    echo "Informations r√©seau - $(date)" >> "$LOG_FILE"
    echo "-----------------------------" >> "$LOG_FILE"
    
    if command -v ip &> /dev/null; then
        echo "Interfaces r√©seau :" | tee -a "$LOG_FILE"
        ip addr show | grep -E "inet |UP|DOWN" | tee -a "$LOG_FILE"
    else
        echo "Configuration r√©seau :" | tee -a "$LOG_FILE"
        ifconfig 2>/dev/null | grep -E "inet |UP|DOWN" | tee -a "$LOG_FILE"
    fi
    
    echo "" | tee -a "$LOG_FILE"
    echo "Table de routage :" | tee -a "$LOG_FILE"
    if command -v ip &> /dev/null; then
        ip route | head -10 | tee -a "$LOG_FILE"
    else
        route -n 2>/dev/null | tee -a "$LOG_FILE"
    fi
    
    read -p "Appuyez sur Entr√©e pour continuer..."
}

# Fonction d'aide
afficher_aide() {
    echo -e "${YELLOW}üìö Aide du script d'administration${NC}"
    echo
    echo -e "${WHITE}Ce script propose les fonctionnalit√©s suivantes :${NC}"
    echo
    echo -e "${GREEN}1. Analyse des logs Apache${NC} - Analyse les fichiers de logs pour d√©tecter les erreurs et les IP suspectes"
    echo -e "${GREEN}2. Analyse des connexions SSH${NC} - Surveille les connexions SSH et d√©tecte les activit√©s suspectes"
    echo -e "${GREEN}3. Nettoyeur de fichiers sensibles${NC} - Recherche et s√©curise les fichiers contenant des informations sensibles"
    echo -e "${GREEN}4. Surveillance de l'espace disque${NC} - Monitore l'utilisation de l'espace disque"
    echo -e "${GREEN}5. V√©rification des mises √† jour${NC} - V√©rifie les mises √† jour disponibles pour le syst√®me"
    echo -e "${GREEN}6. Optimisation syst√®me${NC} - Nettoie les fichiers temporaires et optimise le syst√®me"
    echo -e "${GREEN}7. Planificateur de t√¢ches${NC} - G√®re les t√¢ches cron"
    echo -e "${GREEN}8. Rapport syst√®me${NC} - G√©n√®re un rapport complet du syst√®me"
    echo -e "${GREEN}9. Sauvegarde de donn√©es${NC} - Cr√©e des archives de sauvegarde"
    echo -e "${GREEN}10. Synchronisation de r√©pertoires${NC} - Synchronise des r√©pertoires avec rsync"
    echo -e "${GREEN}11. G√©n√©rateur de templates${NC} - Cr√©e des structures de projets"
    echo -e "${GREEN}12. Test de connectivit√© r√©seau${NC} - Teste la connectivit√© r√©seau et DNS"
    echo
    echo -e "${YELLOW}Tous les rapports sont sauvegard√©s dans : $LOG_DIR${NC}"
    echo
    read -p "Appuyez sur Entr√©e pour continuer..."
}

# Fonction de v√©rification des pr√©requis
verifier_prerequis() {
    echo -e "${BLUE}üîç V√©rification des pr√©requis...${NC}"
    
    local erreurs=0
    
    # V√©rification des commandes essentielles
    local commandes_requises=("awk" "grep" "find" "tar" "df")
    
    for cmd in "${commandes_requises[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            echo -e "${RED}‚ùå Commande manquante : $cmd${NC}"
            ((erreurs++))
        fi
    done
    
    # V√©rification des permissions d'√©criture
    if [ ! -w "$LOG_DIR" ]; then
        echo -e "${RED}‚ùå Impossible d'√©crire dans le r√©pertoire de logs : $LOG_DIR${NC}"
        ((erreurs++))
    fi
    
    if [ $erreurs -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Tous les pr√©requis sont satisfaits${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $erreurs erreur(s) d√©tect√©e(s). Certaines fonctionnalit√©s peuvent ne pas fonctionner.${NC}"
        return 1
    fi
}

# Fonction de nettoyage √† la sortie
cleanup() {
    echo
    echo -e "${YELLOW}üßπ Nettoyage en cours...${NC}"
    
    # Suppression des fichiers temporaires cr√©√©s par le script
    find "$LOG_DIR" -name "*.tmp" -mtime +1 -delete 2>/dev/null
    
    echo -e "${GREEN}‚úÖ Script termin√© proprement${NC}"
    echo -e "${BLUE}üìÅ Les rapports sont disponibles dans : $LOG_DIR${NC}"
    exit 0
}

# Gestionnaire de signaux
trap cleanup EXIT INT TERM

# Fonction principale
main() {
    # V√©rification des pr√©requis au d√©marrage
    if ! verifier_prerequis; then
        read -p "Continuer malgr√© les erreurs ? (y/n) : " continuer
        if [[ "$continuer" != "y" && "$continuer" != "Y" ]]; then
            echo -e "${RED}‚ùå Arr√™t du script${NC}"
            exit 1
        fi
    fi
    
    # Boucle principale du menu
    while true; do
        afficher_banner
        afficher_menu_principal
        
        read -p "$(echo -e ${WHITE}Choisissez une option ${BLUE}[0-12]${WHITE} : ${NC})" choix
        
        case $choix in
            1)
                analyser_logs_apache
                ;;
            2)
                analyser_ssh
                ;;
            3)
                nettoyer_fichiers_sensibles
                ;;
            4)
                surveiller_disque
                ;;
            5)
                verifier_maj
                ;;
            6)
                optimiser_systeme
                ;;
            7)
                planificateur_taches
                ;;
            8)
                generer_rapport_systeme
                ;;
            9)
                sauvegarder_donnees
                ;;
            10)
                synchroniser_repertoires
                ;;
            11)
                generer_templates
                ;;
            12)
                tester_reseau
                ;;
            "h"|"help"|"aide")
                afficher_aide
                ;;
            0|"q"|"quit"|"exit")
                clear
                echo -e "${GREEN}üö™ Au revoir !${NC}"
                cleanup
                ;;
            *)
                echo -e "${RED}‚ùå Choix invalide. Utilisez 'h' pour l'aide.${NC}"
                sleep 2
                ;;
        esac
    done
}

# V√©rification si le script est ex√©cut√© directement
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    # V√©rification de la version de Bash
    if [ "${BASH_VERSION%%.*}" -lt 4 ]; then
        echo -e "${RED}‚ùå Bash version 4.0+ requis. Version actuelle : $BASH_VERSION${NC}"
        exit 1
    fi
    
    # Message de bienvenue
    echo -e "${CYAN}üöÄ D√©marrage du script d'administration syst√®me...${NC}"
    sleep 1
    
    # Lancement du programme principal
    main "$@"
fi

# Fin du script
echo -e "${GREEN}‚ú® Script d'administration syst√®me termin√©${NC}"
